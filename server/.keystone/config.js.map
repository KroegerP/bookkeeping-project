{
  "version": 3,
  "sources": ["../keystone.ts", "../auth.ts", "../schema/category.ts", "../schema/purchase.ts", "../schema/user.ts", "../schema/index.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from \"@keystone-6/core\";\n\n// to keep this file tidy, we define our schema in a different file\nimport { withAuth, session } from \"./auth\";\nimport { lists } from \"./schema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\n\nexport const configuration = config({\n  db: {\n    provider: \"postgresql\",\n    url: \"postgres://postgres:test@localhost:5432\",\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onConnect: async (context) => { /* ... */ },\n    // Optional advanced configuration\n    enableLogging: true,\n    idField: { kind: \"autoincrement\" },\n    shadowDatabaseUrl: \"postgres://postgres:test@localhost:5432/shadowdb\",\n  },\n  lists,\n  session,\n  server: {\n    port: 5000,\n  },\n});\n\nexport default withAuth(\n  configuration,\n);\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n", "import type { Lists } from \".keystone/types\";\nimport type { ListConfig } from \"@keystone-6/core\";\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport { relationship, text } from \"@keystone-6/core/fields\";\n\n\n\nexport const Category: ListConfig<Lists.Category.TypeInfo> = list({\n  // WARNING\n  //   for this starter project, anyone can create, query, update and delete anything\n  //   if you want to prevent random people on the internet from accessing your data,\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  access: allowAll,\n\n  // this is the fields for our User list\n  fields: {\n\n    name: text({ validation: { isRequired: true }, isIndexed: \"unique\" }),\n\n    purchases: relationship({ ref: \"Purchase.category\", many: true }),\n  },\n});", "import type { Lists } from \".keystone/types\";\nimport type { ListConfig } from \"@keystone-6/core\";\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport { float, relationship, text, timestamp } from \"@keystone-6/core/fields\";\n\n\n\nexport const Purchase: ListConfig<Lists.Purchase.TypeInfo> = list({\n  // WARNING\n  //   for this starter project, anyone can create, query, update and delete anything\n  //   if you want to prevent random people on the internet from accessing your data,\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  access: allowAll,\n\n  // this is the fields for our User list\n  fields: {\n\n    // by adding isRequired, we enforce that every User should have a name\n    //   if no name is provided, an error will be displayed\n    date: timestamp({\n      defaultValue: \"2023-12-30T18:05:29.700Z\",\n      validation: { isRequired: true },\n    }),\n\n    description: text({\n      validation: { isRequired: true },\n      // by adding isIndexed: 'unique', we're saying that no user can have the same\n      // email as another user - this may or may not be a good idea for your project,\n    }),\n\n    cost: float({ validation: { isRequired: true } }),\n\n    // we can use this field to see what Posts this User has authored\n    //   more on that in the Post list below\n    category: relationship({ ref: \"Category.purchases\" }),\n\n    createdBy: relationship({ ref: \"User.purchases\" }),\n\n    createdAt: timestamp({\n      // this sets the timestamp to Date.now() when the user is first created\n      defaultValue: { kind: \"now\" },\n    }),\n  },\n});", "import type { Lists } from \".keystone/types\";\nimport type { ListConfig } from \"@keystone-6/core\";\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport { password, relationship, text, timestamp } from \"@keystone-6/core/fields\";\n\n\n\nexport const User: ListConfig<Lists.User.TypeInfo> = list({\n  // WARNING\n  //   for this starter project, anyone can create, query, update and delete anything\n  //   if you want to prevent random people on the internet from accessing your data,\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  access: allowAll,\n\n  // this is the fields for our User list\n  fields: {\n    // by adding isRequired, we enforce that every User should have a name\n    //   if no name is provided, an error will be displayed\n    name: text({ validation: { isRequired: true } }),\n\n    email: text({\n      validation: { isRequired: true },\n      // by adding isIndexed: 'unique', we're saying that no user can have the same\n      // email as another user - this may or may not be a good idea for your project\n      isIndexed: \"unique\",\n    }),\n\n    password: password({ validation: { isRequired: true } }),\n\n    purchases: relationship({ ref: \"Purchase.createdBy\", many: true }),\n\n    createdAt: timestamp({\n      // this sets the timestamp to Date.now() when the user is first created\n      defaultValue: { kind: \"now\" },\n    }),\n  },\n});", "\nimport type { Lists } from \".keystone/types\";\n\nimport { Category } from \"./category\";\nimport { Purchase } from \"./purchase\";\nimport { User } from \"./user\";\n\n\n\nexport const lists: Lists = {\n  User,\n  Purchase,\n  Category,\n};\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields"]
}
